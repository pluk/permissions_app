{"version":3,"sources":["ApiClient.js","constants.js","App.js","serviceWorker.js","index.js"],"names":["ApiClient","APIHost","Object","classCallCheck","this","config","headers","resource","params","arguments","length","undefined","axios","get","payload","put","API_HOST","window","location","hostname","queryString","require","App","_this","possibleConstructorReturn","getPrototypeOf","call","handleChange","e","_ref","name","value","setState","defineProperty","handleGetPermissions","permissions","error","parsedUrl","parseUrl","state","url","query","hl","APIClient","id","then","response","data","catch","_renderList","react_default","a","createElement","List","map","permission","i","_renderPermission","_renderMessage","Message","negative","Header","Item","key","Image","style","fontSize","avatar","src","picture","Content","title","bulleted","perm","j","Description","appId","Container","text","as","Form","onSubmit","Input","placeholder","onChange","Button","content","Component","Boolean","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90fa3b94.chunk.js","sourcesContent":["import axios from 'axios';\n\nexport default class ApiClient {\n    constructor(APIHost) {\n        this.APIHost = APIHost;\n        this.config = {'headers': {}};\n    }\n\n\n    get (resource, params = '') {\n        return axios.get(this.APIHost + resource + '?' + params, this.config);\n    }\n\n    put (resource, payload) {\n        return axios.put(this.APIHost + resource, payload, this.config);\n    }\n}","export const API_HOST = 'http://' + window.location.hostname + ':8080';","import React, { Component } from 'react';\nimport { Container, List, Form, Image, Header, Message } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css'\n\nimport ApiClient from './ApiClient';\nimport { API_HOST } from './constants';\n\nconst queryString = require('query-string');\n\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.appId = null;\n    this.APIClient = new ApiClient(API_HOST);\n\n    this.state = {\n        permissions: [],\n        url: '',\n        error: ''\n    };\n  }\n\n  render() {\n    const url = this.state.url\n\n    return (\n      <Container text>\n        <Header as='h2'>PermissionsApp</Header>\n        <Form onSubmit={this.handleGetPermissions}>\n          <Form.Input\n              placeholder='url...'\n              name='url'\n              value={url}\n              onChange={this.handleChange}\n            />\n            <Form.Button content='Search' />\n        </Form>\n\n        {this._renderList(this.state.permissions)}\n        {this._renderMessage(this.state.error)}\n\n      </Container>\n    );\n  }\n\n  handleChange = (e, { name, value }) => this.setState({ [name]: value })\n\n  handleGetPermissions = (e) => {\n    this.setState({\n      permissions: [],\n      error: ''\n    });\n    var parsedUrl = queryString.parseUrl(this.state.url)\n\n    if (!('id' in parsedUrl.query)) {\n      return '';\n    }\n\n    var hl = parsedUrl.query.hl || 'en'\n\n    this.APIClient.get(\n        '/permissions',\n        'appId=' + parsedUrl.query.id + '&hl=' + hl\n    )\n        .then((response) => {\n            this.setState({\n                permissions: response.data.permissions\n            });\n        })\n        .catch((error) => {\n          this.setState({\n                error: error\n            });\n        });\n  };\n\n  _renderList = (permissions) => {\n    if (permissions.length === 0) {\n      return '';\n    }\n\n    return (\n      <List>\n        {permissions.map((permission, i) => { return (this._renderPermission(permission, i))})}\n      </List>\n    );\n  };\n\n  _renderMessage = (error) => {\n    if (error === '') {\n      return '';\n    }\n    return (\n      <Message negative>\n        <Message.Header>Permissions not found</Message.Header>\n        <p>Try later</p>\n      </Message>\n    );\n  };\n\n  _renderPermission = (permission, i) => {\n    return (\n      <List.Item key={i}>\n        <Image style={{'fontSize':10}} avatar src={permission.picture}/>\n        <List.Content>\n          <List.Header>{ permission.title }</List.Header>\n          <List bulleted>\n            {permission.permissions.map((perm, j) => {\n              return (\n                <List.Item key={j}>\n                  <List.Description>{perm}</List.Description>\n                </List.Item>)\n              })}\n          </List>\n        </List.Content>\n      </List.Item>\n    );\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}